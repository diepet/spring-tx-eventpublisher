<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<!-- PERSISTENCE CONFIGURATION -->
	<tx:annotation-driven transaction-manager="transactionManager"
        proxy-target-class="true" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:embeddedDataSource" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<jdbc:embedded-database id="embeddedDataSource" type="HSQL">
		<jdbc:script location="classpath:sql/create-db.sql" />
		<jdbc:script location="classpath:sql/insert-data.sql" />
	</jdbc:embedded-database>

	<bean id="pum"
		class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
		<property name="persistenceXmlLocations">
			<list>
				<value>classpath:META-INF/test-persistence.xml</value>
			</list>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="generateDdl" value="false" />
		<property name="databasePlatform" value="org.hibernate.dialect.HSQLDialect"/>
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitManager" ref="pum"></property>
		<property name="persistenceUnitName" value="test-persistent-unit"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"></property>
		<property name="loadTimeWeaver">
			<bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
	</bean>

	<!-- Test App Configuration -->
	<bean id="productDAO" class="it.diepet.spring.tx.eventpublisher.test.app.dao.ProductDAO" />
	<bean id="productService"
		class="it.diepet.spring.tx.eventpublisher.test.app.service.ProductServiceImpl" />
	
	<!-- Transaction Manager Configuration -->		
	<bean id="transactionManager" class="it.diepet.spring.tx.lifecycle.EventDispatcherJpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	
	<!-- Transaction Context Manager Configuration -->
	
	<!--import spring-tx-context configuration: no any instance will be created in the Spring context-->
	<import resource="classpath:META-INF/context-tx-spring-application-context.xml"/>
	
	<!-- Creates the transaction context manager to handle a living transaction context -->
	<bean id="transactionContextManager" parent="transactionContextManagerAbstract" />
	
	<!--import spring-tx-eventpublisher configuration: no any instance will be created in the Spring context-->
	<import resource="classpath:META-INF/eventpublisher-tx-spring-application-context.xml"/>
	
	<!-- Creates the transactional event publisher and injects the transaction context manager -->
	<bean id="transactionalEventPublisher" parent="transactionalEventPublisherAbstract">
		<!-- Required -->
		<property name="transactionContextManager" ref="transactionContextManager" />
	</bean> 

	<bean id="customTransactionalEventListener" class="it.diepet.spring.tx.eventpublisher.test.app.listener.CustomTransactionalEventListener" />
	<bean id="notTransactionalEventListener" class="it.diepet.spring.tx.eventpublisher.test.app.listener.NotTransactionalEventListener" />
	

</beans>